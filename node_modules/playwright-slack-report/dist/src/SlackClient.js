"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const LayoutGenerator_1 = require("./LayoutGenerator");
class SlackClient {
    slackWebClient;
    constructor(slackClient) {
        this.slackWebClient = slackClient;
    }
    async sendMessage({ options, }) {
        let blocks;
        if (options.customLayout) {
            blocks = options.customLayout(options.summaryResults);
        }
        else {
            blocks = await (0, LayoutGenerator_1.default)(options.summaryResults, options.maxNumberOfFailures);
        }
        if (!options.channelIds) {
            throw new Error(`Channel ids [${options.channelIds}] is not valid`);
        }
        const result = [];
        for (const channel of options.channelIds) {
            let chatResponse;
            try {
                // under test
                if (options.fakeRequest) {
                    chatResponse = await options.fakeRequest();
                }
                else {
                    // send request for reals
                    chatResponse = await this.doPostRequest(channel, blocks);
                }
                if (chatResponse.ok) {
                    result.push({ channel, outcome: `✅ Message sent to ${channel}` });
                    // eslint-disable-next-line no-console
                    console.log(`✅ Message sent to ${channel}`);
                }
                else {
                    result.push({ channel, outcome: `❌ Message not sent to ${channel} \r\n ${JSON.stringify(chatResponse, null, 2)}` });
                }
            }
            catch (error) {
                result.push({
                    channel,
                    outcome: `❌ Message not sent to ${channel} \r\n ${error.message}`,
                });
            }
        }
        return result;
    }
    async doPostRequest(channel, blocks) {
        const chatResponse = await this.slackWebClient.chat.postMessage({
            channel,
            text: ' ',
            blocks,
        });
        return chatResponse;
    }
}
exports.default = SlackClient;
